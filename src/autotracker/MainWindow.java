/*
 * MainWindow.java
 *
 * Created on June 12, 2007, 11:53 AM
 */

package autotracker;

import java.awt.event.ItemEvent;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.util.prefs.Preferences;

/**
 *
 * @author  jdoud
 */
public class MainWindow extends javax.swing.JFrame {
    
    /** Creates new form MainWindow */
    @SuppressWarnings("unchecked")
public MainWindow() {
        initComponents();
        
	// get preferences
	final Preferences prefs = Preferences.userNodeForPackage(this.getClass());
	project = prefs.get("PROJECT", "IMOS");
	suite = prefs.get("SUITE", "Project 2 Cycle 1");
	labelCurrentSuite.setText("Current Suite: " + suite);
	
	// set data
	assignmentList = getAssignedTesters();
	dlgDetails.setTesters(assignmentList);
	getTestRecords();
        updateFilters();
	
	// set default mode
	labelResult.setVisible(true);
	filterResult.setVisible(true);
	labelStatus.setVisible(true);
	filterStatus.setVisible(true);
	labelAssignment.setVisible(true);
	filterAssignment.setVisible(true);
	labelMethod.setVisible(false);
	filterMethod.setVisible(false);
	labelPriority.setVisible(true);
	filterPriority.setVisible(true);
	labelBuild.setVisible(true);
	filterBuild.setVisible(true);
	labelSuite.setVisible(true);
	filterSuite.setVisible(true);
	labelType.setVisible(true);
	filterType.setVisible(true);
	
	// set table settings
	table.setAutoCreateRowSorter(true);
	keys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        createDataModel();
        filter(NO_SELECTION);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        menuPopupAssigned = new javax.swing.JMenu();
        menuPopupAssigned1 = new javax.swing.JMenuItem();
        menuPopupAssigned2 = new javax.swing.JMenuItem();
        menuPopupAssigned5 = new javax.swing.JMenuItem();
        menuPopupAssigned3 = new javax.swing.JMenuItem();
        menuPopupAssigned6 = new javax.swing.JMenuItem();
        menuPopupAssigned4 = new javax.swing.JMenuItem();
        menuPopupPriority = new javax.swing.JMenu();
        menuPopupPriority1 = new javax.swing.JMenuItem();
        menuPopupPriority2 = new javax.swing.JMenuItem();
        menuPopupPriority3 = new javax.swing.JMenuItem();
        menuPopupPriority4 = new javax.swing.JMenuItem();
        menuPopupResults = new javax.swing.JMenu();
        menuPopupResults1 = new javax.swing.JMenuItem();
        menuPopupResults2 = new javax.swing.JMenuItem();
        menuPopupResults3 = new javax.swing.JMenuItem();
        menuPopupResults4 = new javax.swing.JMenuItem();
        menuPopupResults5 = new javax.swing.JMenuItem();
        menuPopupStatus = new javax.swing.JMenu();
        menuPopupStatus1 = new javax.swing.JMenuItem();
        menuPopupStatus2 = new javax.swing.JMenuItem();
        menuPopupStatus3 = new javax.swing.JMenuItem();
        menuPopupStatus4 = new javax.swing.JMenuItem();
        menuPopupStatus5 = new javax.swing.JMenuItem();
        menuPopupStatus6 = new javax.swing.JMenuItem();
        menuPopupMethods = new javax.swing.JMenu();
        menuPopupMethodsAdd = new javax.swing.JMenuItem();
        menuPopupMethodsClear = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        menuPopupShowDetails = new javax.swing.JMenuItem();
        menuPopupRefreshList = new javax.swing.JMenuItem();
        labelFilter = new javax.swing.JLabel();
        panelFilters = new javax.swing.JPanel();
        labelCategory = new javax.swing.JLabel();
        labelTestName = new javax.swing.JLabel();
        labelPriority = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        labelAssignment = new javax.swing.JLabel();
        filterCategory = new javax.swing.JComboBox();
        filterTestName = new javax.swing.JTextField();
        filterPriority = new javax.swing.JComboBox();
        filterStatus = new javax.swing.JComboBox();
        filterAssignment = new javax.swing.JComboBox();
        clearFilter = new javax.swing.JButton();
        labelMethod = new javax.swing.JLabel();
        filterTestID = new javax.swing.JTextField();
        labelTestID = new javax.swing.JLabel();
        labelResult = new javax.swing.JLabel();
        filterResult = new javax.swing.JComboBox();
        labelBuild = new javax.swing.JLabel();
        labelType = new javax.swing.JLabel();
        filterBuild = new javax.swing.JComboBox();
        filterType = new javax.swing.JComboBox();
        filterSuite = new javax.swing.JComboBox();
        labelSuite = new javax.swing.JLabel();
        filterComponent = new javax.swing.JComboBox();
        labelComponent = new javax.swing.JLabel();
        filterMethod = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        labelTotal = new javax.swing.JLabel();
        labelCurrentSuite = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuFileImport = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        menuFileRefreshList = new javax.swing.JMenuItem();
        menuFilePreferences = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        menuFileQuit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuEditAssigned = new javax.swing.JMenu();
        menuEditAssigned1 = new javax.swing.JMenuItem();
        menuEditAssigned2 = new javax.swing.JMenuItem();
        menuEditAssigned4 = new javax.swing.JMenuItem();
        menuEditAssigned3 = new javax.swing.JMenuItem();
        menuEditAssigned6 = new javax.swing.JMenuItem();
        menuEditAssigned5 = new javax.swing.JMenuItem();
        menuEditPriority = new javax.swing.JMenu();
        menuEditPriority1 = new javax.swing.JMenuItem();
        menuEditPriority2 = new javax.swing.JMenuItem();
        menuEditPriority3 = new javax.swing.JMenuItem();
        menuEditPriority4 = new javax.swing.JMenuItem();
        menuEditResult = new javax.swing.JMenu();
        menuEditResult1 = new javax.swing.JMenuItem();
        menuEditResult2 = new javax.swing.JMenuItem();
        menuEditResult3 = new javax.swing.JMenuItem();
        menuEditResult4 = new javax.swing.JMenuItem();
        menuEditResult5 = new javax.swing.JMenuItem();
        menuEditStatus = new javax.swing.JMenu();
        menuEditStatus1 = new javax.swing.JMenuItem();
        menuEditStatus2 = new javax.swing.JMenuItem();
        menuEditStatus3 = new javax.swing.JMenuItem();
        menuEditStatus4 = new javax.swing.JMenuItem();
        menuEditStatus5 = new javax.swing.JMenuItem();
        menuEditStatus6 = new javax.swing.JMenuItem();
        menuEditMethods = new javax.swing.JMenu();
        menuEditMethodsAdd = new javax.swing.JMenuItem();
        menuEditMethodsClear = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        menuEditDelete = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        menuEditShowDetails = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuViewShowFilters = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        menuViewExecutionMode = new javax.swing.JRadioButtonMenuItem();
        menuViewEditMode = new javax.swing.JRadioButtonMenuItem();
        menuReports = new javax.swing.JMenu();
        menuReportsFilteredStats = new javax.swing.JMenuItem();
        menuReportsAllStats = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        menuReportsUnmappedMethods = new javax.swing.JMenuItem();
        menuReportsUnexecutedAutomation = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuHelpHelp = new javax.swing.JMenuItem();
        menuHelpAbout = new javax.swing.JMenuItem();

        menuPopupAssigned.setText("Change Assignment");

        menuPopupAssigned1.setText("Dale Young");
        menuPopupAssigned1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupAssigned1ActionPerformed(evt);
            }
        });
        menuPopupAssigned.add(menuPopupAssigned1);

        menuPopupAssigned2.setText("Jeff Jewell");
        menuPopupAssigned2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupAssigned2ActionPerformed(evt);
            }
        });
        menuPopupAssigned.add(menuPopupAssigned2);

        menuPopupAssigned5.setText("Jon Allsup");
        menuPopupAssigned.add(menuPopupAssigned5);

        menuPopupAssigned3.setText("Jon Doud");
        menuPopupAssigned3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupAssigned3ActionPerformed(evt);
            }
        });
        menuPopupAssigned.add(menuPopupAssigned3);

        menuPopupAssigned6.setText("Justin Larson");
        menuPopupAssigned6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupAssigned6ActionPerformed(evt);
            }
        });
        menuPopupAssigned.add(menuPopupAssigned6);

        menuPopupAssigned4.setText("Tim Kent");
        menuPopupAssigned4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupAssigned4ActionPerformed(evt);
            }
        });
        menuPopupAssigned.add(menuPopupAssigned4);

        popupMenu.add(menuPopupAssigned);

        menuPopupPriority.setText("Change Priority");

        menuPopupPriority1.setText("P1");
        menuPopupPriority1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupPriority1ActionPerformed(evt);
            }
        });
        menuPopupPriority.add(menuPopupPriority1);

        menuPopupPriority2.setText("P2");
        menuPopupPriority2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupPriority2ActionPerformed(evt);
            }
        });
        menuPopupPriority.add(menuPopupPriority2);

        menuPopupPriority3.setText("P3");
        menuPopupPriority3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupPriority3ActionPerformed(evt);
            }
        });
        menuPopupPriority.add(menuPopupPriority3);

        menuPopupPriority4.setText("P4");
        menuPopupPriority4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupPriority4ActionPerformed(evt);
            }
        });
        menuPopupPriority.add(menuPopupPriority4);

        popupMenu.add(menuPopupPriority);

        menuPopupResults.setText("Change Result");

        menuPopupResults1.setText("Not Run");
        menuPopupResults1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupResults1ActionPerformed(evt);
            }
        });
        menuPopupResults.add(menuPopupResults1);

        menuPopupResults2.setText("Passed");
        menuPopupResults2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupResults2ActionPerformed(evt);
            }
        });
        menuPopupResults.add(menuPopupResults2);

        menuPopupResults3.setText("Failed");
        menuPopupResults3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupResults3ActionPerformed(evt);
            }
        });
        menuPopupResults.add(menuPopupResults3);

        menuPopupResults4.setText("Skipped");
        menuPopupResults4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupResults4ActionPerformed(evt);
            }
        });
        menuPopupResults.add(menuPopupResults4);

        menuPopupResults5.setText("Blocked");
        menuPopupResults5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupResults5ActionPerformed(evt);
            }
        });
        menuPopupResults.add(menuPopupResults5);

        popupMenu.add(menuPopupResults);

        menuPopupStatus.setText("Change Status");

        menuPopupStatus1.setText("Manual");
        menuPopupStatus1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupStatus1ActionPerformed(evt);
            }
        });
        menuPopupStatus.add(menuPopupStatus1);

        menuPopupStatus2.setText("Planned");
        menuPopupStatus2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupStatus2ActionPerformed(evt);
            }
        });
        menuPopupStatus.add(menuPopupStatus2);

        menuPopupStatus3.setText("In Progress");
        menuPopupStatus3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupStatus3ActionPerformed(evt);
            }
        });
        menuPopupStatus.add(menuPopupStatus3);

        menuPopupStatus4.setText("Complete");
        menuPopupStatus4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupStatus4ActionPerformed(evt);
            }
        });
        menuPopupStatus.add(menuPopupStatus4);

        menuPopupStatus5.setText("Broken");
        menuPopupStatus5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupStatus5ActionPerformed(evt);
            }
        });
        menuPopupStatus.add(menuPopupStatus5);

        menuPopupStatus6.setText("Disabled");
        menuPopupStatus6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupStatus6ActionPerformed(evt);
            }
        });
        menuPopupStatus.add(menuPopupStatus6);

        popupMenu.add(menuPopupStatus);

        menuPopupMethods.setText("Change Methods");

        menuPopupMethodsAdd.setText("Add Method");
        menuPopupMethodsAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupMethodsAddActionPerformed(evt);
            }
        });
        menuPopupMethods.add(menuPopupMethodsAdd);

        menuPopupMethodsClear.setText("Clear Methods");
        menuPopupMethodsClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupMethodsClearActionPerformed(evt);
            }
        });
        menuPopupMethods.add(menuPopupMethodsClear);

        popupMenu.add(menuPopupMethods);
        popupMenu.add(jSeparator5);

        menuPopupShowDetails.setText("Show Test Details...");
        menuPopupShowDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupShowDetailsActionPerformed(evt);
            }
        });
        popupMenu.add(menuPopupShowDetails);

        menuPopupRefreshList.setText("Refresh List");
        menuPopupRefreshList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPopupRefreshListActionPerformed(evt);
            }
        });
        popupMenu.add(menuPopupRefreshList);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AutoTracker");

        labelFilter.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        labelFilter.setText("Filter Test Cases");

        panelFilters.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        labelCategory.setText("Category");

        labelTestName.setText("Test Name");

        labelPriority.setText("Priority");

        labelStatus.setText("Dev Status");

        labelAssignment.setText("Assignment");

        filterCategory.setMaximumRowCount(35);
        filterCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Item 1", "Item 2", "Item 3", "Item 4" }));
        filterCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterCategoryItemStateChanged(evt);
            }
        });

        filterTestName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterTestNameKeyReleased(evt);
            }
        });

        filterPriority.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "P1", "P2", "P3", "P4" }));
        filterPriority.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterPriorityItemStateChanged(evt);
            }
        });

        filterStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Manual", "Planned", "In Progress", "Complete", "Broken", "Disabled" }));
        filterStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterStatusItemStateChanged(evt);
            }
        });

        filterAssignment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Item 1", "Item 2", "Item 3", "Item 4" }));
        filterAssignment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterAssignmentItemStateChanged(evt);
            }
        });

        clearFilter.setText("Clear Filter");
        clearFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearFilterMouseClicked(evt);
            }
        });

        labelMethod.setText("Method");

        filterTestID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterTestIDKeyReleased(evt);
            }
        });

        labelTestID.setText("Test ID");

        labelResult.setText("Result");

        filterResult.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Not Run", "Passed", "Failed", "Skipped", "Blocked" }));
        filterResult.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterResultItemStateChanged(evt);
            }
        });

        labelBuild.setText("Build");

        labelType.setText("Run Type");

        filterBuild.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        filterBuild.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterBuildItemStateChanged(evt);
            }
        });

        filterType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Automated", "Manual" }));
        filterType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterTypeItemStateChanged(evt);
            }
        });

        filterSuite.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        filterSuite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterSuiteItemStateChanged(evt);
            }
        });

        labelSuite.setText("Suite");

        filterComponent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Item 1", "Item 2", "Item 3", "Item 4" }));
        filterComponent.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterComponentItemStateChanged(evt);
            }
        });

        labelComponent.setText("Component");

        filterMethod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterMethodKeyReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout panelFiltersLayout = new org.jdesktop.layout.GroupLayout(panelFilters);
        panelFilters.setLayout(panelFiltersLayout);
        panelFiltersLayout.setHorizontalGroup(
            panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelFiltersLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelTestID)
                    .add(filterTestID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filterComponent, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelComponent))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelFiltersLayout.createSequentialGroup()
                        .add(filterCategory, 0, 180, Short.MAX_VALUE)
                        .add(10, 10, 10))
                    .add(panelFiltersLayout.createSequentialGroup()
                        .add(labelCategory)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filterTestName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelTestName))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filterPriority, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelPriority))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filterAssignment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelAssignment))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelStatus)
                    .add(filterStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filterResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelResult))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelMethod)
                    .add(filterMethod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filterBuild, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelBuild))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filterSuite, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelSuite))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelFiltersLayout.createSequentialGroup()
                        .add(filterType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(clearFilter))
                    .add(labelType))
                .addContainerGap())
        );
        panelFiltersLayout.setVerticalGroup(
            panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelFiltersLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelTestID)
                    .add(labelPriority)
                    .add(labelTestName)
                    .add(labelAssignment)
                    .add(labelStatus)
                    .add(labelResult)
                    .add(labelMethod)
                    .add(labelCategory)
                    .add(labelComponent)
                    .add(labelBuild)
                    .add(labelSuite)
                    .add(labelType))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFiltersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(filterPriority, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterTestID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterTestName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterCategory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterAssignment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterComponent, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterMethod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterBuild, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterSuite, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(filterType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(clearFilter))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        table.setComponentPopupMenu(popupMenu);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8"
            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        labelTotal.setText("Records Displayed:");
        labelTotal.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        labelTotal.setMaximumSize(new java.awt.Dimension(120, 22));
        labelTotal.setMinimumSize(new java.awt.Dimension(120, 22));

        labelCurrentSuite.setText("Current Suite: suite");

        menuFile.setText("File");

        menuFileImport.setText("Import TestLink ");
        menuFileImport.setActionCommand("Import Testlink tests...");
        menuFileImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileImportActionPerformed(evt);
            }
        });
        menuFile.add(menuFileImport);
        menuFile.add(jSeparator1);

        menuFileRefreshList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menuFileRefreshList.setText("Refresh List");
        menuFileRefreshList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileRefreshListActionPerformed(evt);
            }
        });
        menuFile.add(menuFileRefreshList);

        menuFilePreferences.setText("Edit Preferences...");
        menuFilePreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFilePreferencesActionPerformed(evt);
            }
        });
        menuFile.add(menuFilePreferences);
        menuFile.add(jSeparator4);

        menuFileQuit.setText("Quit AutoTracker");
        menuFileQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileQuitActionPerformed(evt);
            }
        });
        menuFile.add(menuFileQuit);

        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");

        menuEditAssigned.setText("Change Assignment");

        menuEditAssigned1.setText("Dale Young");
        menuEditAssigned1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditAssigned1ActionPerformed(evt);
            }
        });
        menuEditAssigned.add(menuEditAssigned1);

        menuEditAssigned2.setText("Jeff Jewell");
        menuEditAssigned2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditAssigned2ActionPerformed(evt);
            }
        });
        menuEditAssigned.add(menuEditAssigned2);

        menuEditAssigned4.setText("Jon Allsup");
        menuEditAssigned4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditAssigned4ActionPerformed(evt);
            }
        });
        menuEditAssigned.add(menuEditAssigned4);

        menuEditAssigned3.setText("Jon Doud");
        menuEditAssigned3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditAssigned3ActionPerformed(evt);
            }
        });
        menuEditAssigned.add(menuEditAssigned3);

        menuEditAssigned6.setText("Justin Larson");
        menuEditAssigned6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditAssigned6ActionPerformed(evt);
            }
        });
        menuEditAssigned.add(menuEditAssigned6);

        menuEditAssigned5.setText("Tim Kent");
        menuEditAssigned5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditAssigned5ActionPerformed(evt);
            }
        });
        menuEditAssigned.add(menuEditAssigned5);

        menuEdit.add(menuEditAssigned);

        menuEditPriority.setText("Change Priority");

        menuEditPriority1.setText("P1");
        menuEditPriority1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditPriority1ActionPerformed(evt);
            }
        });
        menuEditPriority.add(menuEditPriority1);

        menuEditPriority2.setText("P2");
        menuEditPriority2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditPriority2ActionPerformed(evt);
            }
        });
        menuEditPriority.add(menuEditPriority2);

        menuEditPriority3.setText("P3");
        menuEditPriority3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditPriority3ActionPerformed(evt);
            }
        });
        menuEditPriority.add(menuEditPriority3);

        menuEditPriority4.setText("P4");
        menuEditPriority4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditPriority4ActionPerformed(evt);
            }
        });
        menuEditPriority.add(menuEditPriority4);

        menuEdit.add(menuEditPriority);

        menuEditResult.setText("Change Result");

        menuEditResult1.setText("Not Run");
        menuEditResult1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditResult1ActionPerformed(evt);
            }
        });
        menuEditResult.add(menuEditResult1);

        menuEditResult2.setText("Passed");
        menuEditResult2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditResult2ActionPerformed(evt);
            }
        });
        menuEditResult.add(menuEditResult2);

        menuEditResult3.setText("Failed");
        menuEditResult3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditResult3ActionPerformed(evt);
            }
        });
        menuEditResult.add(menuEditResult3);

        menuEditResult4.setText("Skipped");
        menuEditResult4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditResult4ActionPerformed(evt);
            }
        });
        menuEditResult.add(menuEditResult4);

        menuEditResult5.setText("Blocked");
        menuEditResult5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditResult5ActionPerformed(evt);
            }
        });
        menuEditResult.add(menuEditResult5);

        menuEdit.add(menuEditResult);

        menuEditStatus.setText("Change Status");

        menuEditStatus1.setText("Manual");
        menuEditStatus1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditStatus1ActionPerformed(evt);
            }
        });
        menuEditStatus.add(menuEditStatus1);

        menuEditStatus2.setText("Planned");
        menuEditStatus2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditStatus2ActionPerformed(evt);
            }
        });
        menuEditStatus.add(menuEditStatus2);

        menuEditStatus3.setText("In Progress");
        menuEditStatus3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditStatus3ActionPerformed(evt);
            }
        });
        menuEditStatus.add(menuEditStatus3);

        menuEditStatus4.setText("Complete");
        menuEditStatus4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditStatus4ActionPerformed(evt);
            }
        });
        menuEditStatus.add(menuEditStatus4);

        menuEditStatus5.setText("Broken");
        menuEditStatus5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditStatus5ActionPerformed(evt);
            }
        });
        menuEditStatus.add(menuEditStatus5);

        menuEditStatus6.setText("Disabled");
        menuEditStatus6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditStatus6ActionPerformed(evt);
            }
        });
        menuEditStatus.add(menuEditStatus6);

        menuEdit.add(menuEditStatus);

        menuEditMethods.setText("Change Methods");

        menuEditMethodsAdd.setText("Add Method");
        menuEditMethodsAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditMethodsAddActionPerformed(evt);
            }
        });
        menuEditMethods.add(menuEditMethodsAdd);

        menuEditMethodsClear.setText("Clear Methods");
        menuEditMethodsClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditMethodsClearActionPerformed(evt);
            }
        });
        menuEditMethods.add(menuEditMethodsClear);

        menuEdit.add(menuEditMethods);
        menuEdit.add(jSeparator3);

        menuEditDelete.setText("Delete Tests");
        menuEditDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditDeleteActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditDelete);
        menuEdit.add(jSeparator7);

        menuEditShowDetails.setText("Show Test Details...");
        menuEditShowDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditShowDetailsActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditShowDetails);

        jMenuBar1.add(menuEdit);

        menuView.setText("View");

        menuViewShowFilters.setSelected(true);
        menuViewShowFilters.setText("Show Filters");
        menuViewShowFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuViewShowFiltersActionPerformed(evt);
            }
        });
        menuView.add(menuViewShowFilters);
        menuView.add(jSeparator2);

        menuViewExecutionMode.setSelected(true);
        menuViewExecutionMode.setText("Execution Mode");
        menuViewExecutionMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuViewExecutionModeActionPerformed(evt);
            }
        });
        menuView.add(menuViewExecutionMode);

        menuViewEditMode.setText("Edit Mode");
        menuViewEditMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuViewEditModeActionPerformed(evt);
            }
        });
        menuView.add(menuViewEditMode);

        jMenuBar1.add(menuView);

        menuReports.setText("Reports");

        menuReportsFilteredStats.setText("Show Filtered Stats");
        menuReportsFilteredStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReportsFilteredStatsActionPerformed(evt);
            }
        });
        menuReports.add(menuReportsFilteredStats);

        menuReportsAllStats.setText("Show All Stats");
        menuReportsAllStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReportsAllStatsActionPerformed(evt);
            }
        });
        menuReports.add(menuReportsAllStats);
        menuReports.add(jSeparator6);

        menuReportsUnmappedMethods.setText("Unmapped Methods");
        menuReportsUnmappedMethods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReportsUnmappedMethodsActionPerformed(evt);
            }
        });
        menuReports.add(menuReportsUnmappedMethods);

        menuReportsUnexecutedAutomation.setText("Unexecuted Automation");
        menuReportsUnexecutedAutomation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReportsUnexecutedAutomationActionPerformed(evt);
            }
        });
        menuReports.add(menuReportsUnexecutedAutomation);

        jMenuBar1.add(menuReports);

        menuHelp.setText("Help");

        menuHelpHelp.setText("Help");
        menuHelpHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHelpHelpActionPerformed(evt);
            }
        });
        menuHelp.add(menuHelpHelp);

        menuHelpAbout.setText("About AutoTracker");
        menuHelpAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHelpAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuHelpAbout);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1311, Short.MAX_VALUE)
                    .add(labelFilter)
                    .add(layout.createSequentialGroup()
                        .add(labelTotal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 1070, Short.MAX_VALUE)
                        .add(labelCurrentSuite))
                    .add(panelFilters, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(labelFilter)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFilters, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelTotal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelCurrentSuite)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc=" GUI Events ">
private void menuFilePreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFilePreferencesActionPerformed
    dlgPreferences.setSuite(suite);
    dlgPreferences.setProject(project);
    dlgPreferences.setVisible(true);
    if(dlgPreferences.getCheck()) {
	suite = dlgPreferences.getSuite();
	project = dlgPreferences.getProject();
	labelCurrentSuite.setText("Current Suite: " + suite);
    }
}//GEN-LAST:event_menuFilePreferencesActionPerformed

    private void filterMethodKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterMethodKeyReleased
	filter(NO_SELECTION);
    }//GEN-LAST:event_filterMethodKeyReleased

    private void filterSuiteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterSuiteItemStateChanged
	if (evt.getStateChange() == ItemEvent.SELECTED) {
            if(filterSuite.getItemCount() > 0) {    
                filter(NO_SELECTION);
            }
        }
    }//GEN-LAST:event_filterSuiteItemStateChanged

    private void filterComponentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterComponentItemStateChanged
	if (evt.getStateChange() == ItemEvent.SELECTED) {
            if(filterComponent.getItemCount() > 0) {    
                filter(NO_SELECTION);
            }
        }
    }//GEN-LAST:event_filterComponentItemStateChanged

    private void menuEditDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditDeleteActionPerformed
	deleteTests();
    }//GEN-LAST:event_menuEditDeleteActionPerformed

    private void menuEditMethodsClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditMethodsClearActionPerformed
	clearMethods();
    }//GEN-LAST:event_menuEditMethodsClearActionPerformed

    private void menuEditMethodsAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditMethodsAddActionPerformed
	addMethods();
    }//GEN-LAST:event_menuEditMethodsAddActionPerformed

    private void menuPopupMethodsAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupMethodsAddActionPerformed
	addMethods();
    }//GEN-LAST:event_menuPopupMethodsAddActionPerformed

    private void menuPopupMethodsClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupMethodsClearActionPerformed
	clearMethods();
    }//GEN-LAST:event_menuPopupMethodsClearActionPerformed

    private void filterTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterTypeItemStateChanged
	if (evt.getStateChange() == ItemEvent.SELECTED) {  
               filter(NO_SELECTION);
        }
    }//GEN-LAST:event_filterTypeItemStateChanged

    private void filterBuildItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterBuildItemStateChanged
	if (evt.getStateChange() == ItemEvent.SELECTED) {
            if(filterBuild.getItemCount() > 0) {    
                filter(NO_SELECTION);
            }
        }
    }//GEN-LAST:event_filterBuildItemStateChanged

    private void menuReportsAllStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReportsAllStatsActionPerformed
	displayStats(false);
    }//GEN-LAST:event_menuReportsAllStatsActionPerformed

    private void menuReportsFilteredStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReportsFilteredStatsActionPerformed
	displayStats(true);
    }//GEN-LAST:event_menuReportsFilteredStatsActionPerformed

    private void menuPopupRefreshListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupRefreshListActionPerformed
	refreshList();
    }//GEN-LAST:event_menuPopupRefreshListActionPerformed

    private void menuPopupShowDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupShowDetailsActionPerformed
	showDetails();
    }//GEN-LAST:event_menuPopupShowDetailsActionPerformed

    private void menuPopupStatus6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupStatus6ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupStatus6ActionPerformed

    private void menuPopupStatus5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupStatus5ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupStatus5ActionPerformed

    private void menuPopupStatus4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupStatus4ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupStatus4ActionPerformed

    private void menuPopupStatus3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupStatus3ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupStatus3ActionPerformed

    private void menuPopupStatus2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupStatus2ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupStatus2ActionPerformed

    private void menuPopupStatus1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupStatus1ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupStatus1ActionPerformed

    private void menuPopupResults5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupResults5ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupResults5ActionPerformed

    private void menuPopupResults4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupResults4ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupResults4ActionPerformed

    private void menuPopupResults3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupResults3ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupResults3ActionPerformed

    private void menuPopupResults2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupResults2ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupResults2ActionPerformed

    private void menuPopupResults1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupResults1ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupResults1ActionPerformed

    private void menuPopupPriority4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupPriority4ActionPerformed
	setPriority(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupPriority4ActionPerformed

    private void menuPopupPriority3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupPriority3ActionPerformed
	setPriority(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupPriority3ActionPerformed

    private void menuPopupPriority2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupPriority2ActionPerformed
	setPriority(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupPriority2ActionPerformed

    private void menuPopupPriority1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupPriority1ActionPerformed
	setPriority(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupPriority1ActionPerformed

    private void menuPopupAssigned4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupAssigned4ActionPerformed
	setAssignment(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupAssigned4ActionPerformed

    private void menuPopupAssigned3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupAssigned3ActionPerformed
	setAssignment(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupAssigned3ActionPerformed

    private void menuPopupAssigned2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupAssigned2ActionPerformed
	setAssignment(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupAssigned2ActionPerformed

    private void menuPopupAssigned1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupAssigned1ActionPerformed
	setAssignment(evt.getActionCommand());
    }//GEN-LAST:event_menuPopupAssigned1ActionPerformed

    private void menuReportsUnexecutedAutomationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReportsUnexecutedAutomationActionPerformed
	dlgList.setDataModel("Unexecuted", project);
	dlgList.setVisible(true);
    }//GEN-LAST:event_menuReportsUnexecutedAutomationActionPerformed

    private void menuReportsUnmappedMethodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReportsUnmappedMethodsActionPerformed
	dlgList.setDataModel("Unmapped", project);
	dlgList.setVisible(true);
    }//GEN-LAST:event_menuReportsUnmappedMethodsActionPerformed
    
    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
	if((evt.getKeyCode() == evt.VK_UP) ||
	    (evt.getKeyCode() == evt.VK_DOWN)) {
	    showDetails();
	}
    }//GEN-LAST:event_tableKeyReleased

    private void menuFileRefreshListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileRefreshListActionPerformed
	refreshList();
    }//GEN-LAST:event_menuFileRefreshListActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
	if(evt.getClickCount() == 2){
	    showDetails();
	} else if((evt.getClickCount() == 1) && (dlgDetails.isVisible())) {
	    showDetails();
	} 
    }//GEN-LAST:event_tableMouseClicked

    private void menuEditShowDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditShowDetailsActionPerformed
	showDetails();
    }//GEN-LAST:event_menuEditShowDetailsActionPerformed

    private void menuFileImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileImportActionPerformed
	dlgImport.setProject(project);
	dlgImport.setVisible(true);
	if(dlgImport.getButton().equals("OK")) {
	    refreshList();
	}
	dlgImport.clearCheckbox();
	
    }//GEN-LAST:event_menuFileImportActionPerformed

    private void menuFileQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileQuitActionPerformed
	System.exit(0);
    }//GEN-LAST:event_menuFileQuitActionPerformed

    private void menuEditStatus1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditStatus1ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuEditStatus1ActionPerformed

    private void menuEditStatus2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditStatus2ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuEditStatus2ActionPerformed

    private void menuEditStatus3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditStatus3ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuEditStatus3ActionPerformed

    private void menuEditStatus4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditStatus4ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuEditStatus4ActionPerformed

    private void menuEditStatus5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditStatus5ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuEditStatus5ActionPerformed

    private void menuEditStatus6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditStatus6ActionPerformed
	setStatus(evt.getActionCommand());
    }//GEN-LAST:event_menuEditStatus6ActionPerformed

    private void menuEditResult1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditResult1ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuEditResult1ActionPerformed

    private void menuEditResult2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditResult2ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuEditResult2ActionPerformed

    private void menuEditResult3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditResult3ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuEditResult3ActionPerformed

    private void menuEditResult4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditResult4ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuEditResult4ActionPerformed

    private void menuEditResult5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditResult5ActionPerformed
	setResult(evt.getActionCommand());
    }//GEN-LAST:event_menuEditResult5ActionPerformed

    private void menuEditPriority4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditPriority4ActionPerformed
	setPriority(evt.getActionCommand());
    }//GEN-LAST:event_menuEditPriority4ActionPerformed

    private void menuEditPriority3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditPriority3ActionPerformed
	setPriority(evt.getActionCommand());
    }//GEN-LAST:event_menuEditPriority3ActionPerformed

    private void menuEditPriority2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditPriority2ActionPerformed
	setPriority(evt.getActionCommand());
    }//GEN-LAST:event_menuEditPriority2ActionPerformed

    private void menuEditPriority1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditPriority1ActionPerformed
	setPriority(evt.getActionCommand());
    }//GEN-LAST:event_menuEditPriority1ActionPerformed

    private void menuEditAssigned5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditAssigned5ActionPerformed
	setAssignment(evt.getActionCommand());
}//GEN-LAST:event_menuEditAssigned5ActionPerformed

    private void menuEditAssigned3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditAssigned3ActionPerformed
	setAssignment(evt.getActionCommand());
    }//GEN-LAST:event_menuEditAssigned3ActionPerformed

    private void menuEditAssigned2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditAssigned2ActionPerformed
	setAssignment(evt.getActionCommand());
    }//GEN-LAST:event_menuEditAssigned2ActionPerformed

    private void menuEditAssigned1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditAssigned1ActionPerformed
	setAssignment(evt.getActionCommand());
    }//GEN-LAST:event_menuEditAssigned1ActionPerformed

    private void menuHelpHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHelpHelpActionPerformed
	JOptionPane.showMessageDialog(this, 
	    "Ask Jon until more detailed help is written.", 
	    "AutoTracker Help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuHelpHelpActionPerformed

    private void menuHelpAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHelpAboutActionPerformed
	JOptionPane.showMessageDialog(this, 
	    "AutoTracker\nVersion 0.7.3\n\nA simple database front-end to track\nautomation development and test case execution.\n", 
	    "About AutoTracker", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuHelpAboutActionPerformed

    private void filterResultItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterResultItemStateChanged
	if (evt.getStateChange() == ItemEvent.SELECTED) {
            filter(NO_SELECTION);
        }
    }//GEN-LAST:event_filterResultItemStateChanged

    private void menuViewEditModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuViewEditModeActionPerformed
	// menu icons
	menuViewEditMode.setSelected(true);
	menuViewExecutionMode.setSelected(false);
	
	// filter controls
	labelResult.setVisible(false);
	filterResult.setVisible(false);
	labelStatus.setVisible(true);
	filterStatus.setVisible(true);
	labelAssignment.setVisible(true);
	filterAssignment.setVisible(true);
	labelMethod.setVisible(true);
	filterMethod.setVisible(true);
	labelPriority.setVisible(true);
	filterPriority.setVisible(true);
	labelBuild.setVisible(false);
	filterBuild.setVisible(false);
	labelSuite.setVisible(false);
	filterSuite.setVisible(false);
	labelType.setVisible(false);
	filterType.setVisible(false);
	
	// reload table
	clearFilters();
	createDataModel();
	filter(NO_SELECTION);
    }//GEN-LAST:event_menuViewEditModeActionPerformed

    private void menuViewExecutionModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuViewExecutionModeActionPerformed
	// menu icons
	menuViewEditMode.setSelected(false);
	menuViewExecutionMode.setSelected(true);
	
	// filter controls
	labelResult.setVisible(true);
	filterResult.setVisible(true);
	labelStatus.setVisible(true);
	filterStatus.setVisible(true);
	labelAssignment.setVisible(true);
	filterAssignment.setVisible(true);
	labelMethod.setVisible(false);
	filterMethod.setVisible(false);
	labelPriority.setVisible(true);
	filterPriority.setVisible(true);
	labelBuild.setVisible(true);
	filterBuild.setVisible(true);
	labelSuite.setVisible(true);
	filterSuite.setVisible(true);
	labelType.setVisible(true);
	filterType.setVisible(true);
	
	// reload table
	clearFilters();
	createDataModel();
	filter(NO_SELECTION);
    }//GEN-LAST:event_menuViewExecutionModeActionPerformed

    private void menuViewShowFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuViewShowFiltersActionPerformed
	labelFilter.setVisible(menuViewShowFilters.isSelected());
	panelFilters.setVisible(menuViewShowFilters.isSelected());
    }//GEN-LAST:event_menuViewShowFiltersActionPerformed

    private void filterTestIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterTestIDKeyReleased
	filter(NO_SELECTION);
    }//GEN-LAST:event_filterTestIDKeyReleased
   
    private void filterAssignmentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterAssignmentItemStateChanged
         if (evt.getStateChange() == ItemEvent.SELECTED) {
            if(filterAssignment.getItemCount() > 0) {    
                filter(NO_SELECTION);
            }
        }
    }//GEN-LAST:event_filterAssignmentItemStateChanged

    private void filterStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterStatusItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            filter(NO_SELECTION);
        }
    }//GEN-LAST:event_filterStatusItemStateChanged

    private void filterPriorityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterPriorityItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            filter(NO_SELECTION);
        }
    }//GEN-LAST:event_filterPriorityItemStateChanged

    private void filterCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterCategoryItemStateChanged
         if (evt.getStateChange() == ItemEvent.SELECTED) {
            if(filterCategory.getItemCount() > 0) {    
                filter(NO_SELECTION);
            }
        }
    }//GEN-LAST:event_filterCategoryItemStateChanged

    private void filterTestNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterTestNameKeyReleased
         filter(NO_SELECTION);
    }//GEN-LAST:event_filterTestNameKeyReleased

    private void clearFilterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFilterMouseClicked
        clearFilters();
    }//GEN-LAST:event_clearFilterMouseClicked

private void menuEditAssigned4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditAssigned4ActionPerformed
    setAssignment(evt.getActionCommand());
}//GEN-LAST:event_menuEditAssigned4ActionPerformed

private void menuPopupAssigned6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPopupAssigned6ActionPerformed
	setAssignment(evt.getActionCommand());
}//GEN-LAST:event_menuPopupAssigned6ActionPerformed

private void menuEditAssigned6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditAssigned6ActionPerformed
	setAssignment(evt.getActionCommand());
}//GEN-LAST:event_menuEditAssigned6ActionPerformed
    // </editor-fold> 
    
    // <editor-fold defaultstate="collapsed" desc=" Table & Data methods "> 
    public void createDataModel() {
	model = null;
	
	if(menuViewExecutionMode.isSelected()) {
	    model = new AbstractTableModel() {
	      public int getColumnCount() { return 13; }
	      public int getRowCount() { return visibleTests.size();}
	      public String getColumnName(int col) {
		  switch(col) {
		      case 0: return "Test ID";
		      case 1: return "Component";
		      case 2: return "Category";
		      case 3: return "Test Name";
		      case 4: return "Priority";  
		      case 5: return "Assignment";
		      case 6: return "Status";
		      case 7: return "Result";
		      case 8: return "Last Run";
		      case 9: return "Build";
		      case 10: return "Suite";
		      case 11: return "Run Type";
		      case 12: return "Notes";
		      default: return "Error";
		  }
	      }
	      public Object getValueAt(int row, int col) { 
		  switch(col) {
		      case 0: return ((Test)visibleTests.get(row)).getId();
		      case 1: return ((Test)visibleTests.get(row)).getComponent();
		      case 2: return ((Test)visibleTests.get(row)).getCategory();
		      case 3: return ((Test)visibleTests.get(row)).getName();
		      case 4: return ((Test)visibleTests.get(row)).getLastPriority();
		      case 5: return ((Test)visibleTests.get(row)).getLastAssignment();
		      case 6: return ((Test)visibleTests.get(row)).getLastStatus();
		      case 7: return ((Test)visibleTests.get(row)).getLastResult();
		      case 8: return ((Test)visibleTests.get(row)).getLastResultDate();
		      case 9: return ((Test)visibleTests.get(row)).getLastResultBuild();
		      case 10: return ((Test)visibleTests.get(row)).getLastResultSuite();
		      case 11: return ((Test)visibleTests.get(row)).getLastResultType();
		      case 12: return ((Test)visibleTests.get(row)).getNotes();
		      default: return "Error";
		  }
	      }
	    };
	} else if(menuViewEditMode.isSelected()) {
	    model = new AbstractTableModel() {
	      public int getColumnCount() { return 9; }
	      public int getRowCount() { return visibleTests.size();}
	      public String getColumnName(int col) {
		  switch(col) {
		      case 0: return "Test ID";
		      case 1: return "Component";
		      case 2: return "Category";
		      case 3: return "Test Name";
		      case 4: return "Priority";  
		      case 5: return "Assignment";
		      case 6: return "Status";
		      case 7: return "Method";
		      case 8: return "Notes";
		      default: return "Error";
		  }
	      }
	      public Object getValueAt(int row, int col) { 
		  switch(col) {
		      case 0: return ((Test)visibleTests.get(row)).getId();
		      case 1: return ((Test)visibleTests.get(row)).getComponent();
		      case 2: return ((Test)visibleTests.get(row)).getCategory();
		      case 3: return ((Test)visibleTests.get(row)).getName();
		      case 4: return ((Test)visibleTests.get(row)).getLastPriority();
		      case 5: return ((Test)visibleTests.get(row)).getLastAssignment();
		      case 6: return ((Test)visibleTests.get(row)).getLastStatus();
		      case 7: return ((Test)visibleTests.get(row)).getMethodString().replaceAll("org.lds.ics.qa.imos.", "");
		      case 8: return ((Test)visibleTests.get(row)).getNotes();
		      default: return "Error";
		  }
	      }
	    };
	}
	
	TableRowSorter sorter = new TableRowSorter(model);
	sorter.setSortsOnUpdates(true);
	sorter.setSortKeys(keys);
	table.setModel(model);
	sorter.sort();
	table.setRowSorter(sorter);
	
	// set column widths
	table.getColumnModel().getColumn(0).setPreferredWidth(35);
	table.getColumnModel().getColumn(1).setPreferredWidth(70);
	table.getColumnModel().getColumn(2).setPreferredWidth(100);
	table.getColumnModel().getColumn(3).setPreferredWidth(300);
	
    }
	
	public ArrayList getAssignedTesters() {
		ArrayList list = new ArrayList();
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			System.out.println("Class Not Found: " + e);
		}
		try {
			Connection con = DriverManager.getConnection(dbConnection, dbUsername, dbPassword);
			Statement stmt = con.createStatement();

			String query = "select name from users " +
			    "where project = '" + project + "'";
			ResultSet rs = stmt.executeQuery(query);

			while(rs.next()) {
				list.add(rs.getString("name"));
			}
		} catch (SQLException e) {
			System.out.println("SQLException: " + e);
			JOptionPane.showMessageDialog(this, "SQLException: " + e, "Info", JOptionPane.INFORMATION_MESSAGE);
		}
		
		return list;
	}
    
    public void getTestRecords() {
	// clear current list
	tests.clear();
	visibleTests.clear();
	
        // database values
        try {
		Class.forName("com.mysql.jdbc.Driver");
	} catch (ClassNotFoundException e) {
		System.out.println("Class Not Found: " + e);
	}
        try {
	    Connection con = DriverManager.getConnection(dbConnection, dbUsername, dbPassword);
	    Statement stmt = con.createStatement();

	    String query = "select * from tests_vw " +
			    "where project = '" + project + "' " +
			    "and deleted='false'";
	    ResultSet rs = stmt.executeQuery(query);

	    while(rs.next()) {
		String t_notes="", t_methods="", t_assign="", t_assignDate="";
		String t_priority="", t_priorityDate="", t_status="", t_statusDate="";
		String t_result="", t_resultDate="", t_build="", t_suite="";
	    
		// create new test and set core data
		Test t = new Test();
		t.setId(rs.getString("test_id"));
		t.setComponent(rs.getString("component"));
		t.setCategory(rs.getString("category"));
		t.setName(rs.getString("name"));
		
		rs.getString("notes");
		if(!rs.wasNull()){ t_notes = rs.getString("notes"); }
		t.setNotes(t_notes);
		
		rs.getString("methods");
		if(!rs.wasNull()){ t_methods = rs.getString("methods"); }
		t.setMethodString(t_methods);
		
		rs.getString("assignment");
		if(!rs.wasNull()){ t_assign = rs.getString("assignment"); }
		t.setLastAssignment(t_assign);
		
		rs.getDate("assignment_date");
		if(!rs.wasNull()){ t_assignDate = rs.getString("assignment_date"); }
		t.setLastAssignmentDate(t_assignDate);
		
		rs.getString("priority");
		if(!rs.wasNull()){ t_priority = rs.getString("priority"); }
		t.setLastPriority(t_priority);
		
		rs.getDate("priority_date");
		if(!rs.wasNull()){ t_priorityDate = rs.getString("priority_date"); }
		t.setLastPriorityDate(t_priorityDate);
		
		rs.getString("status");
		if(!rs.wasNull()){ t_status = rs.getString("status"); }
		t.setLastStatus(t_status);
		
		rs.getDate("status_date");
		if(!rs.wasNull()){ t_statusDate = rs.getString("status_date"); }
		t.setLastStatusDate(t_statusDate);
		
		rs.getString("manual_result");
		if(!rs.wasNull()){ t_result = rs.getString("manual_result"); }
		t.setLastManualResult(t_result);
						
		rs.getString("manual_build");
		if(!rs.wasNull()){ t_build = rs.getString("manual_build"); }
		t.setLastManualResultBuild(t_build);
		
		rs.getString("manual_suite");
		if(!rs.wasNull()){ t_suite = rs.getString("manual_suite"); }
		t.setLastManualResultSuite(t_suite);
		
		rs.getString("auto_result");
		if(!rs.wasNull()){ t_result = rs.getString("auto_result"); }
		t.setLastAutoResult(t_result);
						
		rs.getString("auto_build");
		if(!rs.wasNull()){ t_build = rs.getString("auto_build"); }
		t.setLastAutoResultBuild(t_build);
		
		rs.getString("auto_suite");
		if(!rs.wasNull()){ t_suite = rs.getString("auto_suite"); }
		t.setLastAutoResultSuite(t_suite);
		
		rs.getDate("manual_result_date");
		if(!rs.wasNull()){ t_resultDate = rs.getString("manual_result_date"); }
		t.setLastManualResultDate(t_resultDate);
		
		rs.getDate("auto_result_date");
		if(!rs.wasNull()){ t_resultDate = rs.getString("auto_result_date"); }
		t.setLastAutoResultDate(t_resultDate);
		
		// add test to list
		tests.add(t);
	    }

	    // close database connection
	    rs.close();
	    stmt.close();
	    con.close();
	} catch (SQLException e) {
		System.out.println("SQLException: " + e);
		JOptionPane.showMessageDialog(this, "SQLException: " + e, "Info", JOptionPane.INFORMATION_MESSAGE);
	}
        
        //JOptionPane.showMessageDialog(this, String.valueOf(tests.size()), "Info", JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    public void updateFilters() {
        // clear the controls and lists
	filterComponent.removeAllItems();
	componentList.clear();
        filterCategory.removeAllItems();
        categoryList.clear();
        filterAssignment.removeAllItems();
	filterSuite.removeAllItems();
	suiteList.clear();
	filterBuild.removeAllItems();
	buildList.clear();
        
        // rebuild the lists
        for(int i=0; i<tests.size(); i++) {
            Test t = (Test)tests.get(i);
            
	    // component filter
	    if(!componentList.contains(t.getComponent())) {
		    componentList.add(t.getComponent());
            }
            // category filter
            if(!categoryList.contains(t.getCategory())) {
		    categoryList.add(t.getCategory());
            }
	    // suite filter
	    if(!suiteList.contains(t.getLastResultSuite())) {
		if(!t.getLastResultSuite().equals((""))) {
		    suiteList.add(t.getLastResultSuite());
	       }
	    }
	    // build filter
	    if(!buildList.contains(t.getLastResultBuild())) {
		if(!t.getLastResultBuild().equals((""))) {
		    buildList.add(t.getLastResultBuild());
	       }
	    }
        }
        
        // sort the lists
	Collections.sort(componentList);
	Collections.sort(categoryList);
    Collections.sort(assignmentList);
	Collections.sort(buildList);
	Collections.sort(suiteList);
        
        // add to the controls
	filterComponent.addItem("");
        for(int i=0; i<componentList.size(); i++) {
            filterComponent.addItem(componentList.get(i));
        }
        filterCategory.addItem("");
        for(int i=0; i<categoryList.size(); i++) {
            filterCategory.addItem(categoryList.get(i));
        }
        filterAssignment.addItem("");
	filterAssignment.addItem("<Unassigned>");
        for(int i=0; i<assignmentList.size(); i++) {
            filterAssignment.addItem(assignmentList.get(i));
        }
	filterBuild.addItem("");
	for(int i=0; i<buildList.size(); i++) {
            filterBuild.addItem(buildList.get(i));
        }
	filterSuite.addItem("");
	for(int i=0; i<suiteList.size(); i++) {
            filterSuite.addItem(suiteList.get(i));
        }
        
        // set selected indexes
	filterComponent.setSelectedIndex(0);
        filterCategory.setSelectedIndex(0);
        filterAssignment.setSelectedIndex(0);
	filterBuild.setSelectedIndex(0);
	filterSuite.setSelectedIndex(0);
    }
    
    public void filter(int[] selection) {
        if(tests.size() > 0 &&
		filterComponent.getItemCount() > 0 &&
                filterCategory.getItemCount() > 0 &&
                filterAssignment.getItemCount() > 0 &&
		filterSuite.getItemCount() > 0 &&
		filterBuild.getItemCount() > 0) {   
            visibleTests.clear();
            for(int i=tests.size()-1; i>=0; i--) {    
	    
		// check test id
                boolean id = false;
                if(filterTestID.getText().equals("")) {
                    id = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getId().toLowerCase().contains(filterTestID.getText().toLowerCase())) {
                        id = true;
                    }
                }
		
		// check component
                boolean component = false;
                if(filterComponent.getSelectedIndex() == 0) {
                    component = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getComponent().equals(filterComponent.getSelectedItem().toString())) {
                        component = true;
                    }
                }
		
		// check category
                boolean category = false;
                if(filterCategory.getSelectedIndex() == 0) {
                    category = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getCategory().equals(filterCategory.getSelectedItem().toString())) {
                        category = true;
                    }
                }
           
                // check test name
                boolean name = false;
                if(filterTestName.getText().equals("")) {
                    name = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getName().toLowerCase().contains(filterTestName.getText().toLowerCase())) {
                        name = true;
                    }
                }
		
		// check priority
                boolean priority = false;
                if(filterPriority.getSelectedIndex() == 0) {
                    priority = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getLastPriority().equals(filterPriority.getSelectedItem().toString())) {
                        priority = true;
                    }
                }
		
		// check status
                boolean status = false;
                if(filterStatus.getSelectedIndex() == 0) {
                    status = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getLastStatus().equals(filterStatus.getSelectedItem().toString())) {
                        status = true;
                    }
                }

                // check assignment
                boolean assignment = false;
                if(filterAssignment.getSelectedIndex() == 0) {
                    assignment = true;
		}else if(filterAssignment.getSelectedItem().toString().equals("<Unassigned>")){
		    Test t = (Test)tests.get(i);
		    if(t.getLastAssignment().equals("")) {
			assignment = true;
		    }
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getLastAssignment().equals(filterAssignment.getSelectedItem().toString())) {
                        assignment = true;
                    }
                }
		
		// check result
                boolean result = false;
                 if(filterResult.getSelectedIndex() == 0) {
                    result = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getLastResult().toUpperCase().equals(filterResult.getSelectedItem().toString().toUpperCase())) {
                        result = true;
                    }else if((t.getLastResult().equals("")) & (filterResult.getSelectedItem().toString().equals("Not Run"))) {
			result = true;
		    }
                }
		
		// check method
                boolean method = false;
                if(filterMethod.getText().equals("")) {
                    method = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getMethodString().toLowerCase().contains(filterMethod.getText().toLowerCase())) {
                        method = true;
                    }
                }
		
		// check build
                boolean build = false;
                 if(filterBuild.getSelectedIndex() == 0) {
                    build = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getLastResultBuild().toUpperCase().equals(filterBuild.getSelectedItem().toString().toUpperCase())) {
                        build = true;
		    }
                }
		
		// check suite
                boolean suite = false;
                 if(filterSuite.getSelectedIndex() == 0) {
                    suite = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getLastResultSuite().toUpperCase().equals(filterSuite.getSelectedItem().toString().toUpperCase())) {
                        suite = true;
		    }
                }
		    
		// check type
                boolean type = false;
                 if(filterType.getSelectedIndex() == 0) {
                    type = true;
                }else{
                    Test t = (Test)tests.get(i);
                    if(t.getLastResultType().toUpperCase().equals(filterType.getSelectedItem().toString().toUpperCase())) {
                        type = true;
		    }
                }

                if(id && component && category && name && priority && status && assignment 
			&& result && method && build && suite && type) {
                    visibleTests.add(tests.get(i));
                }
            }

            createDataModel();
        }
	
	// set selection
	for(int i=0; i<selection.length; i++) {
	    if(selection[i] < visibleTests.size()) {
		table.addRowSelectionInterval(selection[i], selection[i]);
	    }
	}
	
	// update record numbers
	labelTotal.setText("Records Displayed: " + String.valueOf(visibleTests.size()));
    }
    
    public void clearFilters() {
	filterTestID.setText("");
	filterCategory.setSelectedIndex(0);
        filterTestName.setText("");
        filterResult.setSelectedIndex(0);
        filterStatus.setSelectedIndex(0);
        filterAssignment.setSelectedIndex(0);
	filterMethod.setText("");
	filterPriority.setSelectedIndex(0);
	filterBuild.setSelectedIndex(0);
	filterType.setSelectedIndex(0);
    }
    
    public void showDetails() {
	if(table.getSelectedRowCount() == 0) {
	    JOptionPane.showMessageDialog(this, 
		"Select a test before displaying details.", 
		"AutoTracker", JOptionPane.WARNING_MESSAGE);
	}else if(table.getSelectedRowCount() > 1) {
	    JOptionPane.showMessageDialog(this, 
		"Only one test can be selected to display details.", 
		"AutoTracker", JOptionPane.WARNING_MESSAGE);
	}else{
	    dlgWait.setText("Retrieving data...");
	    dlgWait.setVisible(true);
	    int i=0;
	    while(!((Test)visibleTests.get(i)).getId().equals((String)table.getValueAt(table.getSelectedRow(), 0))) { i++; }
	    dlgDetails.setTest((Test)visibleTests.get(i));
	    dlgDetails.setVisible(true);
	    dlgWait.setVisible(false);
	}
    }
    
    public void refreshList() {
	// open wait list
	//dlgWait.setText("Refreshing list...");
	dlgWait.setVisible(true);
	
	// save current filters
	String t_id = filterTestID.getText();
	String t_category = filterCategory.getSelectedItem().toString();
	String t_name = filterTestName.getText();
	String t_priority = filterPriority.getSelectedItem().toString();
	String t_status = filterStatus.getSelectedItem().toString();
	String t_assignment = filterAssignment.getSelectedItem().toString();
	String t_result = filterResult.getSelectedItem().toString();
	String t_method = filterMethod.getText();
	int[] selection = table.getSelectedRows();

	// update table and use current filters
	getTestRecords();
	updateFilters();
	filterTestID.setText(t_id);
	filterCategory.setSelectedItem(t_category);
	filterTestName.setText(t_name);
	filterPriority.setSelectedItem(t_priority);
	filterStatus.setSelectedItem(t_status);
	filterAssignment.setSelectedItem(t_assignment);
	filterResult.setSelectedItem(t_result);
	filterMethod.setText(t_method);
	createDataModel();
	filter(selection);
	dlgWait.setVisible(false);
    }
    // </editor-fold>
        
    // <editor-fold defaultstate="collapsed" desc=" Reports methods "> 
    public void displayStats(boolean filtered) {
	ArrayList list;
	if(filtered) {
	    list = visibleTests;
	} else {
	    list = tests;
	}
	
	// get numbers for display
	int n = list.size();
	double a=0, auto=0, e=0, p=0, f=0, s=0, b=0, d=0;
	for(int i=0; i<n; i++) {
	    Test t = (Test)list.get(i);
	    
	    if(!t.getLastAssignment().equals("")) a++;
	    if(t.getLastStatus().equals("Complete")) auto++;
	    else if(t.getLastStatus().equals("In Progress")) auto++;
	    else if(t.getLastStatus().equals("Broken")) auto++;
	    if(!t.getLastResult().equals("")) e++;
	    if(t.getLastResult().equals("Passed")) p++;
	    if(t.getLastResult().equals("Failed")) f++;
	    if(t.getLastResult().equals("Skipped")) s++;
	    if(t.getLastStatus().equals("Blocked")) b++;
	    if(t.getLastStatus().equals("Disabled")) d++;
	}
	
	// build stats block
	String text = "Number of Tests:\t" + n + "\n\n";
	text += String.format("%3$-15s %1$4.0f  ( %2$2.2f%% )%n", a, (a/n)*100, "Assigned:");
	text += String.format("%3$-15s %1$4.0f  ( %2$2.2f%% )%n", auto, (auto/n)*100, "Automated:");	
	text += String.format("%3$-15s %1$4.0f  ( %2$2.2f%% )%n", e, (e/n)*100, "Executed:");
	text += "\n";
	text += String.format("%3$-15s %1$4.0f  ( %2$2.2f%% )%n", p, (p/n)*100, "Passed:");
	text += String.format("%3$-15s %1$4.0f  ( %2$2.2f%% )%n", f, (f/n)*100, "Failed:");
	text += String.format("%3$-15s %1$4.0f  ( %2$2.2f%% )%n", s, (s/n)*100, "Skipped:");
	text += String.format("%3$-15s %1$4.0f  ( %2$2.2f%% )%n", b, (b/n)*100, "Blocked:");
	text += String.format("%3$-15s %1$4.0f  ( %2$2.2f%% )%n", d, (d/n)*100, "Disabled:");
		
	JOptionPane.showMessageDialog(this, text, 
	    "Filtered Statistics", JOptionPane.INFORMATION_MESSAGE);
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc=" Database Update methods "> 
    public void setAssignment(String tester) {
	if(table.getSelectedRowCount() == 0) {
	    JOptionPane.showMessageDialog(this, 
		"Select one or more tests before changing assignment.", 
		"AutoTracker", JOptionPane.WARNING_MESSAGE);
	    return;
	}
	
	dlgWait.setText("Updating data...");
	dlgWait.setVisible(true);
	String testID = "";
	for(int i=0; i<table.getSelectedRows().length; i++) {
	    testID = (String)table.getValueAt(table.getSelectedRows()[i], 0);
	    updateData("insert into assignments (test_id, assignment, timestamp) values ('" 
						   + testID +"', '" + tester + "', NOW())");
	}
	dlgWait.setVisible(false);
	refreshList();
    }
    
    public void setPriority(String priority) {
	if(table.getSelectedRowCount() == 0) {
	    JOptionPane.showMessageDialog(this, 
		"Select one or more tests before changing priority.", 
		"AutoTracker", JOptionPane.WARNING_MESSAGE);
	    return;
	}
	
	dlgWait.setText("Updating data...");
	dlgWait.setVisible(true);
	String testID = "";
	for(int i=0; i<table.getSelectedRows().length; i++) {
	    testID = (String)table.getValueAt(table.getSelectedRows()[i], 0);
	    updateData("insert into priorities (test_id, priority, timestamp) values ('" 
						   + testID +"', '" + priority + "', NOW())");
	}
	dlgWait.setVisible(false);
	refreshList();
    }
    
    public void setResult(String result) {
	if(table.getSelectedRowCount() == 0) {
	    JOptionPane.showMessageDialog(this, 
		"Select one or more tests before changing result.", 
		"AutoTracker", JOptionPane.WARNING_MESSAGE);
	    return;
	}
	
	dlgWait.setText("Updating data...");
	dlgWait.setVisible(true);
	String testID = "";
	for(int i=0; i<table.getSelectedRows().length; i++) {
	    testID = (String)table.getValueAt(table.getSelectedRows()[i], 0);
	    updateData("insert into results (test_id, method, result, timestamp, type, build, suite, project) values ('" 
		   + testID +"', '', '" + result + "', NOW(), 'Manual', '', '" + suite + "', '" + project + "')");
	}
	dlgWait.setVisible(false);
	refreshList();
    }
    
    public void setStatus(String status) {
	if(table.getSelectedRowCount() == 0) {
	    JOptionPane.showMessageDialog(this, 
		"Select one or more tests before changing status.", 
		"AutoTracker", JOptionPane.WARNING_MESSAGE);
	    return;
	}
	
	dlgWait.setText("Updating data...");
	dlgWait.setVisible(true);
	String testID = "";
	for(int i=0; i<table.getSelectedRows().length; i++) {
	    testID = (String)table.getValueAt(table.getSelectedRows()[i], 0);
	    updateData("insert into statuses (test_id, status, timestamp) values ('" 
						   + testID +"', '" + status + "', NOW())");
	}
	dlgWait.setVisible(false);
	refreshList();
    }
    
    public void addMethods() {
	if(table.getSelectedRowCount() == 0) {
	    JOptionPane.showMessageDialog(this, 
		"Select one or more tests before adding methods.", 
		"AutoTracker", JOptionPane.WARNING_MESSAGE);
	    return;
	}
	String input = JOptionPane.showInputDialog(this, "Name of method to add to tests:",
		"AutoTracker", JOptionPane.OK_CANCEL_OPTION); 
	if(input != null) {
	    if(!input.equals("")) {
		dlgWait.setText("Updating data...");
		dlgWait.setVisible(true);
		String testID = "";
		for(int i=0; i<table.getSelectedRows().length; i++) {
		    testID = (String)table.getValueAt(table.getSelectedRows()[i], 0);
		    updateData("insert into methods (test_id, method) values ('" 
			+ testID + "', '" + input + "')");
		}
		dlgWait.setVisible(false);
		refreshList();
	    }
	}
    }
       
    public void clearMethods() {
	if(table.getSelectedRowCount() == 0) {
	    JOptionPane.showMessageDialog(this, 
		"Select one or more tests before clearing methods.", 
		"AutoTracker", JOptionPane.WARNING_MESSAGE);
	    return;
	}
	
	if(JOptionPane.showConfirmDialog(this, 
		"Do you want to clear all associated methods for these tests?",
		"AutoTracker", JOptionPane.YES_NO_OPTION, 
		JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
	    
	    dlgWait.setText("Updating data...");
	    dlgWait.setVisible(true);
	    String testID = "";
	    for(int i=0; i<table.getSelectedRows().length; i++) {
		testID = (String)table.getValueAt(table.getSelectedRows()[i], 0);
		updateData("delete from methods where test_id='" + testID + "'");
	    }
	    dlgWait.setVisible(false);
	    refreshList();
	}
    }
    
    public void deleteTests() {
	if(table.getSelectedRowCount() == 0) {
	    JOptionPane.showMessageDialog(this, 
		"Select one or more tests before deleting.", 
		"AutoTracker", JOptionPane.WARNING_MESSAGE);
	    return;
	}
	
	if(JOptionPane.showConfirmDialog(this, 
		"Do you want to delete these tests?",
		"AutoTracker", JOptionPane.YES_NO_OPTION, 
		JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
	    
	    dlgWait.setText("Updating data...");
	    dlgWait.setVisible(true);
	    String testID = "";
	    for(int i=0; i<table.getSelectedRows().length; i++) {
		testID = (String)table.getValueAt(table.getSelectedRows()[i], 0);
		updateData("update test_cases set deleted='1' where test_id='" + testID + "'");
	    }
	    dlgWait.setVisible(false);
	    refreshList();
	}
    }
    
    public void updateData(String query) {
	try {
		Class.forName("com.mysql.jdbc.Driver");
	} catch (ClassNotFoundException e) {
		System.out.println("Class Not Found: " + e);
	}
        try {
	    Connection con = DriverManager.getConnection(dbConnection, dbUsername, dbPassword);
	    Statement stmt = con.createStatement();

	    stmt.executeUpdate(query);
	    
	    // close database connection
	    stmt.close();
	    con.close();		
	} catch (SQLException e) {
		System.out.println("SQLException: " + e);
	}
    }
    // </editor-fold> 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    
    // <editor-fold defaultstate="collapsed" desc=" Generated Variables "> 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearFilter;
    private javax.swing.JComboBox filterAssignment;
    private javax.swing.JComboBox filterBuild;
    private javax.swing.JComboBox filterCategory;
    private javax.swing.JComboBox filterComponent;
    private javax.swing.JTextField filterMethod;
    private javax.swing.JComboBox filterPriority;
    private javax.swing.JComboBox filterResult;
    private javax.swing.JComboBox filterStatus;
    private javax.swing.JComboBox filterSuite;
    private javax.swing.JTextField filterTestID;
    private javax.swing.JTextField filterTestName;
    private javax.swing.JComboBox filterType;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JLabel labelAssignment;
    private javax.swing.JLabel labelBuild;
    private javax.swing.JLabel labelCategory;
    private javax.swing.JLabel labelComponent;
    private javax.swing.JLabel labelCurrentSuite;
    private javax.swing.JLabel labelFilter;
    private javax.swing.JLabel labelMethod;
    private javax.swing.JLabel labelPriority;
    private javax.swing.JLabel labelResult;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelSuite;
    private javax.swing.JLabel labelTestID;
    private javax.swing.JLabel labelTestName;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JLabel labelType;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuEditAssigned;
    private javax.swing.JMenuItem menuEditAssigned1;
    private javax.swing.JMenuItem menuEditAssigned2;
    private javax.swing.JMenuItem menuEditAssigned3;
    private javax.swing.JMenuItem menuEditAssigned4;
    private javax.swing.JMenuItem menuEditAssigned5;
    private javax.swing.JMenuItem menuEditAssigned6;
    private javax.swing.JMenuItem menuEditDelete;
    private javax.swing.JMenu menuEditMethods;
    private javax.swing.JMenuItem menuEditMethodsAdd;
    private javax.swing.JMenuItem menuEditMethodsClear;
    private javax.swing.JMenu menuEditPriority;
    private javax.swing.JMenuItem menuEditPriority1;
    private javax.swing.JMenuItem menuEditPriority2;
    private javax.swing.JMenuItem menuEditPriority3;
    private javax.swing.JMenuItem menuEditPriority4;
    private javax.swing.JMenu menuEditResult;
    private javax.swing.JMenuItem menuEditResult1;
    private javax.swing.JMenuItem menuEditResult2;
    private javax.swing.JMenuItem menuEditResult3;
    private javax.swing.JMenuItem menuEditResult4;
    private javax.swing.JMenuItem menuEditResult5;
    private javax.swing.JMenuItem menuEditShowDetails;
    private javax.swing.JMenu menuEditStatus;
    private javax.swing.JMenuItem menuEditStatus1;
    private javax.swing.JMenuItem menuEditStatus2;
    private javax.swing.JMenuItem menuEditStatus3;
    private javax.swing.JMenuItem menuEditStatus4;
    private javax.swing.JMenuItem menuEditStatus5;
    private javax.swing.JMenuItem menuEditStatus6;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFileImport;
    private javax.swing.JMenuItem menuFilePreferences;
    private javax.swing.JMenuItem menuFileQuit;
    private javax.swing.JMenuItem menuFileRefreshList;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuHelpAbout;
    private javax.swing.JMenuItem menuHelpHelp;
    private javax.swing.JMenu menuPopupAssigned;
    private javax.swing.JMenuItem menuPopupAssigned1;
    private javax.swing.JMenuItem menuPopupAssigned2;
    private javax.swing.JMenuItem menuPopupAssigned3;
    private javax.swing.JMenuItem menuPopupAssigned4;
    private javax.swing.JMenuItem menuPopupAssigned5;
    private javax.swing.JMenuItem menuPopupAssigned6;
    private javax.swing.JMenu menuPopupMethods;
    private javax.swing.JMenuItem menuPopupMethodsAdd;
    private javax.swing.JMenuItem menuPopupMethodsClear;
    private javax.swing.JMenu menuPopupPriority;
    private javax.swing.JMenuItem menuPopupPriority1;
    private javax.swing.JMenuItem menuPopupPriority2;
    private javax.swing.JMenuItem menuPopupPriority3;
    private javax.swing.JMenuItem menuPopupPriority4;
    private javax.swing.JMenuItem menuPopupRefreshList;
    private javax.swing.JMenu menuPopupResults;
    private javax.swing.JMenuItem menuPopupResults1;
    private javax.swing.JMenuItem menuPopupResults2;
    private javax.swing.JMenuItem menuPopupResults3;
    private javax.swing.JMenuItem menuPopupResults4;
    private javax.swing.JMenuItem menuPopupResults5;
    private javax.swing.JMenuItem menuPopupShowDetails;
    private javax.swing.JMenu menuPopupStatus;
    private javax.swing.JMenuItem menuPopupStatus1;
    private javax.swing.JMenuItem menuPopupStatus2;
    private javax.swing.JMenuItem menuPopupStatus3;
    private javax.swing.JMenuItem menuPopupStatus4;
    private javax.swing.JMenuItem menuPopupStatus5;
    private javax.swing.JMenuItem menuPopupStatus6;
    private javax.swing.JMenu menuReports;
    private javax.swing.JMenuItem menuReportsAllStats;
    private javax.swing.JMenuItem menuReportsFilteredStats;
    private javax.swing.JMenuItem menuReportsUnexecutedAutomation;
    private javax.swing.JMenuItem menuReportsUnmappedMethods;
    private javax.swing.JMenu menuView;
    private javax.swing.JRadioButtonMenuItem menuViewEditMode;
    private javax.swing.JRadioButtonMenuItem menuViewExecutionMode;
    private javax.swing.JCheckBoxMenuItem menuViewShowFilters;
    private javax.swing.JPanel panelFilters;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    // </editor-fold> 
    
    // variables
    private ArrayList tests = new ArrayList();
    private ArrayList visibleTests = new ArrayList();
    private ArrayList componentList = new ArrayList();
    private ArrayList categoryList = new ArrayList();
    private ArrayList assignmentList = new ArrayList();
    private ArrayList buildList = new ArrayList();
    private ArrayList suiteList = new ArrayList();
    private ArrayList keys = new ArrayList();
    private TableModel model;
    
    private DialogDetails dlgDetails = new DialogDetails(this, false);
    private DialogImport dlgImport = new DialogImport(this, true);
    private DialogWait dlgWait = new DialogWait(this, false);
    private DialogList dlgList = new DialogList(this, true);
    private DialogPreferences dlgPreferences = new DialogPreferences(this, true);
    
    private int[] NO_SELECTION = {};
    
    private String project = "";
    private String suite = "";
        
    // database connection variables
    //private String dbConnection = "jdbc:mysql://localhost:3306/imos";
    //private String dbUsername = "imos";
    //private String dbPassword = "im0s";
    private String dbConnection = "jdbc:mysql://10.51.94.3/imos";
    private String dbUsername = "imos";
    private String dbPassword = "Testit66";
}
