/*
 * DialogDetails.java
 *
 * Created on July 11, 2007, 1:36 PM
 */

package autotracker;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author  jdoud
 */
public class DialogDetails extends javax.swing.JDialog {
    
    /** Creates new form DialogDetails */
    public DialogDetails(java.awt.Frame parent, boolean modal) {
	super(parent, modal);
	initComponents();
	history.setAutoCreateRowSorter(true);
	keys.add(new RowSorter.SortKey(0, SortOrder.DESCENDING));
	dlgWait = new DialogWait(parent, false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        testCaseID = new javax.swing.JLabel();
        testCaseName = new javax.swing.JTextField();
        category = new javax.swing.JTextField();
        assignment = new javax.swing.JComboBox();
        status = new javax.swing.JComboBox();
        priority = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        methods = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        notes = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        history = new javax.swing.JTable();
        cancel = new javax.swing.JButton();
        ok = new javax.swing.JButton();
        apply = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Test Case ID:");

        jLabel2.setText("Test Case Name:");

        jLabel3.setText("Category:");

        jLabel4.setText("Assigned Tester:");

        jLabel5.setText("Priority:");

        jLabel6.setText("Development Status:");

        jLabel7.setText("Execution History");

        testCaseID.setText("jLabel8");

        assignment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tester 1", "Tester 2", "Tester 3" }));
        assignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignmentActionPerformed(evt);
            }
        });

        status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Manual", "Planned", "In Progress", "Complete", "Broken", "Disabled" }));

        priority.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "P1", "P2", "P3", "P4" }));

        jLabel8.setText("Automation Method(s):");

        jLabel9.setText("Notes:");

        methods.setColumns(20);
        methods.setRows(5);
        jScrollPane1.setViewportView(methods);

        notes.setColumns(20);
        notes.setRows(5);
        jScrollPane2.setViewportView(notes);

        history.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(history);

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        ok.setText("OK");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        apply.setText("Apply");
        apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addGap(24, 24, 24))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                            .addComponent(testCaseName, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                            .addComponent(testCaseID)
                            .addComponent(category, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(assignment, 0, 131, Short.MAX_VALUE)
                                    .addComponent(status, javax.swing.GroupLayout.Alignment.TRAILING, 0, 131, Short.MAX_VALUE)
                                    .addComponent(priority, javax.swing.GroupLayout.Alignment.TRAILING, 0, 131, Short.MAX_VALUE))
                                .addGap(407, 407, 407))))
                    .addComponent(jLabel7)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apply)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ok)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testCaseID)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(testCaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(assignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(ok)
                    .addComponent(apply))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyActionPerformed
	saveData();
    }//GEN-LAST:event_applyActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
	saveData();
	this.setVisible(false);
    }//GEN-LAST:event_okActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
	this.setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

private void assignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignmentActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_assignmentActionPerformed
    
    public void saveData() {
	dlgWait.setText("Saving data...");
	dlgWait.setVisible(true);
	try {
		Class.forName("com.mysql.jdbc.Driver");
	} catch (ClassNotFoundException e) {
		System.out.println("Class Not Found: " + e);
	}
        try {
	    Connection con = DriverManager.getConnection(dbConnection, dbUsername, dbPassword);
	    Statement stmt = con.createStatement();

	    // update test_cases
	    if(!category.getText().equals(test.getCategory())
		|| !testCaseName.getText().equals(test.getName())
		|| !notes.getText().equals(test.getName())) {
		stmt.executeUpdate("update test_cases set "
		    + "category='" + category.getText() + "', "
		    + "name='" + testCaseName.getText() + "', "
		    + "notes='" + notes.getText() + "' "
		    + "where test_id='" + test.getId() + "'");
	    }
	    
	    // update methods
	    if(!methods.getText().replaceAll("\\n", "|").equals(test.getMethodString())) {
		stmt.executeUpdate("delete from methods where test_id='" + test.getId() + "'");
		if(!methods.getText().equals("")) {
		    String[] m = methods.getText().split("\\n");
		    for(int i=0; i<m.length; i++) {
			if(!m[i].startsWith("org.lds.ics.qa.imos.")){
			    m[i] = "org.lds.ics.qa.imos." + m[i];
			}
			//System.out.println(i + ": " + m[i]);
			stmt.executeUpdate("insert into methods (test_id, method) "
			    + "values ('" + test.getId() + "', '" + m[i] + "')");
		    }
		}
	    }
	    
	    // update assignments
	    if(!assignment.getSelectedItem().toString().equals(test.getLastAssignment())) {
		stmt.executeUpdate("insert into assignments (test_id, assignment, timestamp) "
		    + "values ('" + test.getId() + "', '" + assignment.getSelectedItem().toString()
		    + "', now())");
	    }
	    
	    // update priorities
	    if(!priority.getSelectedItem().toString().equals(test.getLastPriority())) {
		stmt.executeUpdate("insert into priorities (test_id, priority, timestamp) "
		    + "values ('" + test.getId() + "', '" + priority.getSelectedItem().toString()
		    + "', now())");
	    }
	    
	    // update statuses
	    if(!status.getSelectedItem().toString().equals(test.getLastStatus())) {
		stmt.executeUpdate("insert into statuses (test_id, status, timestamp) "
		    + "values ('" + test.getId() + "', '" + status.getSelectedItem().toString()
		    + "', now())");
	    }
	    
	    // close database connection
	    stmt.close();
	    con.close();
	    
	    dlgWait.setVisible(false);
	    
	} catch (SQLException e) {
		System.out.println("SQLException: " + e);
		JOptionPane.showMessageDialog(this, 
		    "SQLException: " + e, 
		    "AutoTracker", JOptionPane.ERROR_MESSAGE);
	}
    }
    
    public void setTest(Test t) {
	test = t;
	
	// set core data
	testCaseID.setText(test.getId());
	testCaseName.setText(test.getName());
	category.setText(test.getCategory());
	assignment.setSelectedItem(test.getLastAssignment());
	priority.setSelectedItem(test.getLastPriority());
	status.setSelectedItem(test.getLastStatus());
	methods.setText(test.getMethodString().replaceAll("\\|", "\n"));
	notes.setText(test.getNotes());
	
	// get execution history data
	list.clear();
	// open database connection
	try {
		Class.forName("com.mysql.jdbc.Driver");
	} catch (ClassNotFoundException e) {
		System.out.println("Class Not Found: " + e);
	}
        try {
	    Connection con = DriverManager.getConnection(dbConnection, dbUsername, dbPassword);
	  	   
	    // set execution history by test id
	    Statement stmt = con.createStatement();
	    String query = "select * from results where test_id='" + test.getId() + "'";
	    ResultSet rs = stmt.executeQuery(query);
	    while(rs.next()) {
		TestResult r = new TestResult();
		
		String method="", result="", timestamp="";
		String build="", suite="", type="";
		
		rs.getString("method");
		if(!rs.wasNull()){ method = rs.getString("method"); }
		r.setMethod(method);
		
		rs.getString("result");
		if(!rs.wasNull()){ result = rs.getString("result"); }
		r.setResult(result);
		
		rs.getString("timestamp");
		if(!rs.wasNull()){ timestamp = rs.getString("timestamp"); }
		r.setDate(timestamp);
		
		rs.getString("type");
		if(!rs.wasNull()){ type = rs.getString("type"); }
		r.setType(type);
		
		rs.getString("build");
		if(!rs.wasNull()){ build = rs.getString("build"); }
		r.setBuild(build);
		
		rs.getString("suite");
		if(!rs.wasNull()){ suite = rs.getString("suite"); }
		r.setSuite(suite);
		
		list.add(r);
	    }
	    stmt.close();
	       	    
	    // set execution history by automation methods
	    String[] m = test.getMethodString().split("\\|");
	    for(int i=0; i<m.length; i++)
	    {
		Statement stmt2 = con.createStatement();
		String query2 = "select * from results where method='" + m[i] + "'";
		ResultSet rs2 = stmt2.executeQuery(query2);
		while(rs2.next()) {
		    TestResult r = new TestResult();

		    String method="", result="", timestamp="";
		    String build="", suite="", type="";

		    rs2.getString("method");
		    if(!rs2.wasNull()){ method = rs2.getString("method"); }
		    r.setMethod(method);

		    rs2.getString("result");
		    if(!rs2.wasNull()){ result = rs2.getString("result"); }
		    r.setResult(result);

		    rs2.getString("timestamp");
		    if(!rs2.wasNull()){ timestamp = rs2.getString("timestamp"); }
		    r.setDate(timestamp);
		    
		    rs2.getString("type");
		    if(!rs2.wasNull()){ type = rs2.getString("type"); }
		    r.setType(type);

		    rs2.getString("build");
		    if(!rs2.wasNull()){ build = rs2.getString("build"); }
		    r.setBuild(build);

		    rs2.getString("suite");
		    if(!rs2.wasNull()){ suite = rs2.getString("suite"); }
		    r.setSuite(suite);

		    list.add(r);
		}
		stmt2.close();
	    }
	    
	     // close database connection
	    con.close();
	    updateTable();
	    	    
	} catch (SQLException e) {
		System.out.println("SQLException: " + e);
		JOptionPane.showMessageDialog(this, 
		    "SQLException: " + e, 
		    "AutoTracker", JOptionPane.ERROR_MESSAGE);
	}
    }
	
	public void setTesters(ArrayList list) {
		assignment.removeAllItems();
		Collections.sort(list);
		assignment.addItem("");
        for(int i=0; i<list.size(); i++) {
            assignment.addItem(list.get(i));
        }
	}
    
    public void updateTable() {	
	model = null;
	model = new AbstractTableModel() {
	      public int getColumnCount() { return 6; }
	      public int getRowCount() { return list.size();}
	      public String getColumnName(int col) {
		  switch(col) {
		      case 0: return "Date";
		      case 1: return "Result";
		      case 2: return "Type";
		      case 3: return "Method";
		      case 4: return "Build";  
		      case 5: return "Suite";
		      default: return "Error";
		  }
	      }
	      public Object getValueAt(int row, int col) { 
		  switch(col) {
		      case 0: return ((TestResult)list.get(row)).getDate();
		      case 1: return ((TestResult)list.get(row)).getResult();
		      case 2: return ((TestResult)list.get(row)).getType();
		      case 3: return ((TestResult)list.get(row)).getMethod().replaceAll("org.lds.ics.qa.imos.", "");
		      case 4: return ((TestResult)list.get(row)).getBuild();
		      case 5: return ((TestResult)list.get(row)).getSuite();
		      default: return "Error";
		  }
	      }
	    };
	TableRowSorter sorter = new TableRowSorter(model);
	sorter.setSortsOnUpdates(true);
	sorter.setSortKeys(keys);
	history.setModel(model);
	sorter.sort();
	history.setRowSorter(sorter);
	
	// set column widths
	history.getColumnModel().getColumn(0).setPreferredWidth(140);
	history.getColumnModel().getColumn(1).setPreferredWidth(40);
	history.getColumnModel().getColumn(2).setPreferredWidth(60);
	history.getColumnModel().getColumn(3).setPreferredWidth(200);
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		new DialogDetails(new javax.swing.JFrame(), true).setVisible(true);
	    }
	});
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apply;
    private javax.swing.JComboBox assignment;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField category;
    private javax.swing.JTable history;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea methods;
    private javax.swing.JTextArea notes;
    private javax.swing.JButton ok;
    private javax.swing.JComboBox priority;
    private javax.swing.JComboBox status;
    private javax.swing.JLabel testCaseID;
    private javax.swing.JTextField testCaseName;
    // End of variables declaration//GEN-END:variables
    
    private Test test = new Test();
    private TableModel model;
    private ArrayList list = new ArrayList();
    private ArrayList keys = new ArrayList();
    
    private DialogWait dlgWait;
    
    // database connection variables
    //private String dbConnection = "jdbc:mysql://localhost:3306/imos";
    //private String dbUsername = "imos";
    //private String dbPassword = "im0s";
    private String dbConnection = "jdbc:mysql://10.51.94.3/imos";
    private String dbUsername = "imos";
    private String dbPassword = "Testit66";
}
